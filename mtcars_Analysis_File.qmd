--- 
title: "Creation of mtcars Analysis File"
author:
  - name: Frank Harrell
    affiliation: Department of Biostatistics<br>Vanderbilt University School of Medicine
date: last-modified
format:
  html:
    self-contained: true
    code-link: false
    code-tools: true
    code-fold: show
    code-block-bg: "#f1f3f5"
    code-block-border-left: "#31BAE9"

execute:
  warning: false
  message: false
---

```{r}
options(prType='html')

require(Hmisc)
require(qreport)
require(magrittr)
require(tidyverse)
require(rio)


data(mtcars)

mtcars <- mtcars %>% tibble::rownames_to_column(., var='Model')
# class(mtcars)
# View(mtcars)

Hmisc::contents(mtcars)


```

Click on the tabs to see the different kinds of variables.  Hover over spike histograms to see frequencies and details about binning.

```{r results='asis', eval=FALSE}

sparkline::sparkline(0)   # load javascript dependencies for interactive spike histograms

# THIS DOES NOT WORK!! "Named arguments are required for `cols_label()`."

maketabs(print(describe(mtcars), 'both'), cwidth='column-screen-inset-shaded')
```

```{r}
save(mtcars, file='mtcars.sav', compress=TRUE)
cat(html(contents(mtcars)), file='Cmtcars.html')
```

Here is the older html output format for `describe`.

```{r}
describe(mtcars)
```

## Data Overview

```{r results='asis'}
dataOverview(mtcars, id = ~ id)
```

## Missing Data Report

```{r results='asis'}
missChk(mtcars, prednmiss=TRUE, omitpred='id')
```

## Variable Clustering Report

The R `Hmisc` package `transace` function, which uses the ACE (alternating conditional expectation) algorithm, is used to transform all the continuous variables.  Transformations use nonparametric smoothers and are allowed to be non-monotonic.  Transformation solutions maximize the $R^2$ which with each variable can be predicted from the other variables, optimally transformed.  The transformed variables are used in redundancy analysis and sparse principal components analysis.  mtcars and subject `id` are not used in these unsupervised learning procedures.

To be more efficient, use multiple (5) imputations with predictive mean matching so that `vClus` will stack all the filled-in datasets before running the redundancy and PCA which are run on the single tall dataset, which contains no `NA`s.  The correlation matrix and `varclus` results are already efficient because they use pairwise deletion of `NA`s.

Because transformed variables are passed to the redundancy analysis, variables are not expanded into splines in that analysis (see `nk=0` below).


```{r results='asis'}
n <- setdiff(names(mtcars), 'id')
n[n == 'baso'] <- 'I(baso)'  # force baso to be linear in MI b/c of ties
f <- as.formula(paste('~', paste(n, collapse='+')))
midone <- TRUE  # took aregImpute about 15 minutes
if(! midone) {
  set.seed(1)   # so that mult. imputations reproduce
  a <- aregImpute(f, data=mtcars, n.impute=5)
  saveRDS(a, 'a.rds')
  } else a <- readRDS('a.rds')
v <- vClus(mtcars, fracmiss=0.8, corrmatrix=TRUE,
           trans=TRUE, redundancy=TRUE, spc=TRUE,
           exclude = ~ id + mtcars,
                     imputed=a,
                 redunargs=list(nk=0),
                 spcargs=list(k=20, sw=TRUE, nvmax=5), # spc took 5 minutes
                     transacefile='transace.rds',
                 spcfile='spc.rds')   # spcfile uses previous run if nothing changed
cat('R^2 in predicting each variable with transace:\n\n')
htmlVerbatim(round(attr(v$transace, 'rsq'), 3))
saveRDS(v, '/tmp/v.rds')
```

```{r}
#| fig-height: 12
#| fig-width: 7
ggplot_transace(v$transace, nrow=12)
```

```{r}
#| fig-height: 4
#| fig-width: 6
p <- v$princmp
# Print and plot sparse PC results
print(p)
plot(p)
```

```{r}
#| fig-height: 7
#| fig-width: 8
#| column: screen-right
plot(v$p, 'loadings', nrow=1)
```
